---
title: Introduction to Coding and Data Analysis for Scientists
jupyter: python3
---


## Week 3: Loops


## Today's Lecture

 - Lecture 3: Loops
   - Recap: Accessing Noteable
   - Recap: If Statements
   - For Loops
   - While Loops
   - Practical

## Recap: Accessing Noteable

 - Open Blackboard
 - Go to `Introduction to Coding and Data Analysis for Scientists 2025`
 - Click `Unit Information and Resources`
 - Open Noteable
   - Make sure `Jupyter Classic (Legacy)` is selected.
   - Click Start
 - Click `+GitRepo`
 - Paste into Git Repository URL: `git@github.com:TomMaullin/SCIF10002-2025.git`
 - Press clone

<img src="./images/noteable2.png" alt="Welcome page for the unit on Blackboard" style="display:block;margin-left:auto;margin-right:auto;width:20%"/>

## Recap: If Statements

 - Last week, we looked at the `if` statement
 - `if` statements allow us run code only when a specific condition is `True`
 - We can add `elif` and `else` statements to give us finer control over when code is executed
   - An `elif` runs if it’s Boolean is True and all previous clauses (`if`s and `elif`s) did not execute
   - An `else` runs if all other clauses did not execute
 - Today, we will look at another feature of Python that gives us finer control over our code - loops

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
number = 5

if number > 0:
    print("Positive number")
    
elif number == 0:
    print("Zero")
    
else:
    print("Negative number")
```

## Motivation

 - Suppose we want to do a very repetitive computation
 - For instance, suppose we want to `print` the square of each item in this list

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
my_list = [1,5,8,3,2,2,4]
```

 - We could just write something like this...

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
number_squared = my_list[0]**2
print(number_squared)

number_squared = my_list[1]**2
print(number_squared)

number_squared = my_list[2]**2
print(number_squared)

number_squared = my_list[3]**2
print(number_squared)

number_squared = my_list[4]**2
print(number_squared)

number_squared = my_list[5]**2
print(number_squared)

number_squared = my_list[6]**2
print(number_squared)
```

## Motivation

 - But it would be nice to be able to do this automatically!
 - This is what loops do!

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
# For Loop
for num in my_list:
    number_squared = num ** 2
    print(number_squared)


print('--------------')

# While Loop
i=0
while i < len(my_list):
    number_squared = my_list[i] ** 2
    print(number_squared)
    i += 1
```

## Iterable Objects

 - An iterable object is an object which contains lots of elements that we could list one by one
 - We've already seen an example - the `list`
 - Other examples include:
   - Tuples - like lists but use round brackets and can't be changed
   - Dictionaries - records "keys" and "values" so that we can look up data using labels of our choosing
   - A `range` object - a python object that represents a sequence of numbers, saved in a useful, memory-efficient way
 - A `for` loop performs an operation on each element in an iterable object

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
# Example Tuple
my_tuple = (1,5,2,4)

# Example dict
my_dict = {"Alice": 25, "Bob": 30, "Charlie": 22}
print(my_dict["Bob"])

# Example range
my_range = range(10)
```

## For Loops

 - A `for` loop lets you run code for every element in an iterable object
 - Let's look at an example:

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
numbers = [1, 2, 3, 4, 5]
for n in numbers:
    print(n)
```

Translation: 

> *"For every number in the list, print that number"*

## While Loops

 - A `while` loop lets you run code repeatedly so long as a Boolean statement is `True`

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
number = 5
my_boolean = number > 0
while my_boolean:
    number = number - 1
    my_boolean = number > 0
    print("number is " + str(number))
```

Let's compare this to an `if` statement
 - An `if` statement executes once if the Boolean is `True`
 - An `while` loop executes repeatedly until the Boolean is `False`

```{pyodide}
#| caption: "▶ Ctrl/Cmd+Enter | ⇥ Ctrl/Cmd+] | ⇤ Ctrl/Cmd+["
#| slideshow: {slide_type: fragment}
number = 5
my_boolean = number > 0
if my_boolean:
    print("Positive number")
```

## Practical

 - We now move over to Python
 - Please open [week_03_home.ipynb](./week_03_home.qmd)
 - For the rest of today, you must work through a Python notebook
 - You have a choice of one of three options
   - [Option 1: Beginner - For and While Loops](week_03_loops_beginner.qmd)
   - [Option 2: Intermediate - Advanced Iteration](week_03_loops_intermediate.qmd)
   - [Option 3: Advanced - Comprehensions](week_03_loops_advanced.qmd)

